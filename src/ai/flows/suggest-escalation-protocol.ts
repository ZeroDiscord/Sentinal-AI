// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI flow to determine whether an incident report should be escalated.
 *
 * - suggestEscalation - A function that determines if an incident should be escalated.
 * - SuggestEscalationInput - The input type for the suggestEscalation function.
 * - SuggestEscalationOutput - The return type for the suggestEscalation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestEscalationInputSchema = z.object({
  incidentDescription: z
    .string()
    .describe('A detailed description of the incident being reported.'),
  incidentType: z.string().describe('The type of incident being reported.'),
  incidentLocation: z.string().describe('The location of the incident.'),
});
export type SuggestEscalationInput = z.infer<typeof SuggestEscalationInputSchema>;

const SuggestEscalationOutputSchema = z.object({
  shouldEscalate: z
    .boolean()
    .describe(
      'A boolean value indicating whether the incident should be escalated.'
    ),
  escalationReason: z
    .string()
    .describe(
      'The reasoning behind the escalation suggestion, providing context for the decision.'
    ),
  suggestedTags: z
    .array(z.string())
    .describe('Suggested tags or categories for the incident.'),
  estimatedSeverity: z
    .string()
    .describe(
      'An estimation of the incident severity, e.g., low, moderate, high, critical.'
    ),
});
export type SuggestEscalationOutput = z.infer<typeof SuggestEscalationOutputSchema>;

export async function suggestEscalation(input: SuggestEscalationInput): Promise<SuggestEscalationOutput> {
  return suggestEscalationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestEscalationPrompt',
  input: {schema: SuggestEscalationInputSchema},
  output: {schema: SuggestEscalationOutputSchema},
  prompt: `You are an AI assistant designed to analyze incident reports and determine whether they should be escalated to higher authorities. Based on the incident description, incident type, and incident location, evaluate the severity and potential impact of the incident.

  Incident Description: {{{incidentDescription}}}
  Incident Type: {{{incidentType}}}
  Incident Location: {{{incidentLocation}}}

  Consider factors such as the potential for harm, violation of policies, and disruption to normal operations. Provide a clear rationale for your escalation suggestion.
  Also suggest tags and estimate the severity, which will allow human operators to efficiently action the request.
  Output in JSON format.
  `,
});

const suggestEscalationFlow = ai.defineFlow(
  {
    name: 'suggestEscalationFlow',
    inputSchema: SuggestEscalationInputSchema,
    outputSchema: SuggestEscalationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
