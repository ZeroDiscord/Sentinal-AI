// This is an autogenerated file from Firebase Studio.

'use server';

import { callGemini } from '../gemini';

/**
 * @fileOverview AI flow to determine whether an incident report should be escalated.
 *
 * - suggestEscalation - A function that determines if an incident should be escalated.
 * - SuggestEscalationInput - The input type for the suggestEscalation function.
 * - SuggestEscalationOutput - The return type for the suggestEscalation function.
 */

/**
 * Calls Gemini API to suggest escalation protocol for an incident.
 * @param {string} incidentDescription - The incident description.
 * @param {string} incidentType - The type of incident.
 * @param {string} incidentLocation - The location of the incident.
 * @returns {Promise<object>} - The escalation suggestion and other AI results.
 */
export async function suggestEscalation({ incidentDescription, incidentType, incidentLocation }) {
  const prompt = `Given the following incident, suggest if it should be escalated (shouldEscalate: boolean), why (escalationReason: string), and suggest tags (array) and severity (estimatedSeverity: low, medium, high). Respond in JSON with keys: shouldEscalate, escalationReason, suggestedTags, estimatedSeverity.\n\nDescription: ${incidentDescription}\nType: ${incidentType}\nLocation: ${incidentLocation}`;
  const response = await callGemini({ prompt });
  let shouldEscalate = false, escalationReason = '', suggestedTags = [], estimatedSeverity = '';
  try {
    const candidate = response.candidates?.[0];
    const text = candidate?.content?.parts?.[0]?.text || candidate?.content?.parts?.[0] || '';
    let parsed;
    try {
      parsed = JSON.parse(text);
    } catch (e) {
      const match = text.match(/```json([\s\S]*?)```|({[\s\S]*})/);
      if (match) {
        parsed = JSON.parse(match[1] || match[2]);
      }
    }
    if (parsed) {
      shouldEscalate = typeof parsed.shouldEscalate === 'boolean' ? parsed.shouldEscalate : false;
      escalationReason = parsed.escalationReason || '';
      suggestedTags = Array.isArray(parsed.suggestedTags) ? parsed.suggestedTags : [];
      estimatedSeverity = parsed.estimatedSeverity || '';
    } else {
      escalationReason = text;
    }
  } catch (err) {
    escalationReason = 'AI response parsing error';
  }
  return {
    shouldEscalate,
    escalationReason,
    suggestedTags,
    estimatedSeverity
  };
}
