"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { summarizeIncidentReport } from "@/ai/flows/summarize-incident-report";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { Lightbulb, AlertTriangle, Check, Tags, ShieldAlert, ShieldCheck } from "lucide-react";

export default function AIAnalysis({ reportText }) {
  const [analysis, setAnalysis] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!reportText) return;
    const getAnalysis = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const result = await summarizeIncidentReport({ report: reportText });
        setAnalysis(result);
      } catch (err) {
        setError("Failed to get AI analysis. Please try again later.");
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };
    getAnalysis();
  }, [reportText]);

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="space-y-4">
          <Skeleton className="h-4 w-1/3" />
          <Skeleton className="h-16 w-full" />
          <Skeleton className="h-4 w-1/4" />
          <div className="flex gap-2">
            <Skeleton className="h-6 w-16" />
            <Skeleton className="h-6 w-20" />
            <Skeleton className="h-6 w-12" />
          </div>
          <Skeleton className="h-4 w-1/2" />
        </div>
      );
    }

    if (error) {
      return <p className="text-destructive">{error}</p>;
    }

    if (!analysis) {
      return <p>No analysis available.</p>;
    }

    return (
      <div className="space-y-6">
        <div>
          <h4 className="font-semibold text-foreground mb-2 flex items-center gap-2"><Lightbulb className="w-4 h-4 text-amber-400" /> Summary</h4>
          <p className="text-sm text-muted-foreground">{analysis.summary}</p>
        </div>
        <div>
          <h4 className="font-semibold text-foreground mb-2 flex items-center gap-2"><Tags className="w-4 h-4 text-sky-400" /> Suggested Tags</h4>
          <div className="flex flex-wrap gap-2">
            {analysis.tags.map((tag) => (
              <Badge key={tag} variant="secondary">{tag}</Badge>
            ))}
          </div>
        </div>
        <div>
          <h4 className="font-semibold text-foreground mb-2">Severity & Escalation</h4>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-2">
              <AlertTriangle className="w-4 h-4 text-red-400" />
              <span className="font-medium">Severity:</span>
              <Badge className="capitalize" variant={analysis.severity === 'high' ? 'destructive' : 'secondary'}>
                {analysis.severity}
              </Badge>
            </div>
            
          </div>
          <div className="flex items-center gap-2 text-sm mt-2">
              {analysis.escalate ? (
                  <>
                      <ShieldAlert className="w-4 h-4 text-emerald-500" />
                      <span className="font-medium text-emerald-400">Escalation Recommended</span>
                  </>
              ) : (
                  <>
                    <ShieldCheck className="w-4 h-4 text-muted-foreground"/>
                    <span className="text-muted-foreground">No Escalation Needed</span>
                  </>
              )}
            </div>
        </div>
      </div>
    );
  };

  return (
    <Card className="glass-card sticky top-24">
      <CardHeader>
        <CardTitle>AI Analysis</CardTitle>
        <CardDescription>Generated by SentinelAI</CardDescription>
      </CardHeader>
      <CardContent>{renderContent()}</CardContent>
    </Card>
  );
}
